type: update
name: LiteSpeed License Manager
baseUrl: https://raw.githubusercontent.com/sych74/litespeed/master
logo: /images/ls-ws-license.svg?sanitize=true
description:
  short: Press "Configure" button to choose and instantly apply the required license options.
  
globals:
  appid: 9e6afcf310004ac84060f90ff41a5aba
  
#targetNodes: none
nodeGroupAlias:
  ${settings.nodeGroup}: cp

buttons:        
  - settings: main
    action: configure
    caption: Configure
    submitButtonText: Apply          
    loadingText: Updating...
    confirmText: Do you want to apply license updates?
    successText: The license has been successfully updated!

onBeforeInit: |
  var resp = jelastic.dev.scripting.Eval(jps.globals.appid, session, "ls.wizard.ui");            
  return resp.response ? resp.response:resp;

onInstall:
  - if ("${nodes.cp.master.nodeType}".indexOf("litespeedphp") > -1):
      cmd[cp]: sed -i "s/root@localhost/${user.email}/g" /var/www/conf/httpd_config.xml
#  - updateLicense
  - configure
   
onAfterStart: configure
#onAfterStart: updateLicense

onBeforeSetCloudletCount[cp]:
  updateLicense: ${event.params.flexibleCloudlets}
onBeforeServiceScaleOut[cp]: updateLicense
onAfterScaleIn:
  if ('${event.params.nodeGroup}' == '${settings.nodeGroup}'):
    - if (${nodes.cp.length:0}): updateLicense
    - if (!${nodes.cp.length:0}): deleteLicense  #delete last node in a layer
onBeforeDelete: deleteLicense
onAfterStop: 
  - if (event.response.result == 0): deleteLicense
  - else:
      log: "ERROR -> result: ${event.response.result}, error: ${event.response.error}"    
onAfterClone:
  install: ${baseUrl}/addons/license.jps?_r=${fn.random}
  envName: ${event.response.env.envName}
  settings: 
    nodeGroup: ${settings.nodeGroup}

actions:
  updateLicense:
    script: |-
      var cloudlets = getParam("cloudlets") || ${nodes.cp.master.flexibleCloudlets:0},
          params = {envName:"${env.envName}", appId:"${env.appid}", nodeGroup:"${settings.nodeGroup}", cloudlets:cloudlets},
          resp = jelastic.dev.scripting.Eval("${globals.appid}", session, "ls.license", params);
      return resp.response ? resp.response:resp;
    cloudlets: ${this:}
    
  configure: 
   script: |-
      var modules = "${settings.modules:cache}",
          workers = ${settings.workers:1},
          domains = ${settings.domains:5},
          cloudlets = ${nodes.cp.master.flexibleCloudlets:0};
      if ((cloudlets *  ${nodes.cp.length}) > 16 && workers == 1 && domains == 1 && modules == 'cache') {
        return {result:'warning', message:'FREE Starter lisense is applicable only for nodes with scaling limit up to 16 cloudlets / 2 GiB RAM'}
      }
      var params = {
            envName:"${env.envName}", 
            appId:"${env.appid}", 
            nodeGroup:"${targetNodes.nodeGroup}", 
            cloudlets:cloudlets,
            modules:modules,
            domains:domains,
            workers:workers
          },
          resp = jelastic.dev.scripting.Eval("${globals.appid}", session, "ls.license", params);
      return resp.response ? resp.response:resp;      

  deleteLicense:
    updateLicense: delete

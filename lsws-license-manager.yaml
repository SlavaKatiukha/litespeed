type: update
id: lsws-license-manager
name: LiteSpeed Web Server - Commercial License Manager
logo: https://raw.githubusercontent.com/sych74/litespeed/master/images/ls-ws-license.svg?sanitize=true
description:
  short: Please choose the most appropritae license option. 
  text: Simply choose number of workers, numbers of domains and LiteMage addon for enabling one of the license options available at the [official website](https://www.litespeedtech.com/products/litespeed-web-server/lsws-pricing).  

globals:
  appid: 9e6afcf310004ac84060f90ff41a5aba
  
nodeGroupAlias:
  ${targetNodes.nodeGroup}: cp
  
targetNodes:
  nodeType:
    - litespeedphp
    - llsmp

buttons:        
  - settings: main
    action: configure
    caption: Configure
    submitButtonText: Apply          
    loadingText: Updating...
    confirmText: Do you want to apply license updates?
    successText: LiteSpeed license has been successfully updated!

onBeforeInit: |
  var resp = jelastic.dev.scripting.Eval(jps.globals.appid, session, "ls.wizard.ui");            
  return resp.response ? resp.response:resp;

onAfterClone:
  - script: delete MANIFEST.id; return {result:0, jps:MANIFEST};
  - install: ${response.jps}
    envName: ${event.response.env.envName}
    nodeGroup: cp
    settings: 
      modules: ${settings.modules}      
      workers: ${settings.workers}      
      domains: ${settings.domains}      

onAfterStart: configure
onInstall: configure
      
actions:
  configure: 
   script: |-
      var modules = "${settings.modules:cache}",
          workers = ${settings.workers},
          domains = ${settings.domains},
          cloudlets = ${nodes.cp.master.flexibleCloudlets:0};
      if ((cloudlets *  ${nodes.cp.length}) > 16 && workers == 1 && domains == 1 && modules == 'cache') {
        return {result:'warning', message:'FREE Starter lisense is applicable only for nodes with scaling limit up to 16 cloudlets / 2 GiB RAM'}
      }
      var params = {
            envName:"${env.envName}", 
            appId:"${env.appid}", 
            nodeGroup:"${targetNodes.nodeGroup}", 
            cloudlets:cloudlets,
            modules:modules,
            domains:domains,
            workers:workers
          },
          resp = jelastic.dev.scripting.Eval("${globals.appid}", session, "ls.license", params);
      return resp.response ? resp.response:resp;  
